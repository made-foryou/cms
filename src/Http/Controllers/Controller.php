<?php

declare(strict_types=1);

namespace Made\Cms\Http\Controllers;

use Illuminate\Contracts\Container\BindingResolutionException;
use Illuminate\Contracts\View\View;
use Illuminate\Http\Request;
use Illuminate\Routing\Controller as BaseController;
use Made\Cms\Analytics\Models\Visit;
use Made\Cms\Models\Settings\WebsiteSetting;
use Made\Cms\Shared\Actions\GetControllerFromRouteable;
use Made\Cms\Shared\Models\Route;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;

class Controller extends BaseController
{
    public function __construct(
        protected readonly WebsiteSetting $websiteSetting,
    ) {
        //
    }

    /**
     * Handles the invocation of the controller when the object is used as a callable.
     *
     * This method processes the incoming request by inspecting the URI and determining
     * the proper route to handle the request. If the URI is empty (representing the
     * root or landing page), it retrieves the landing page configuration. Otherwise,
     * it attempts to find a route that matches the URI. If no appropriate route is found,
     * the request is terminated with a 404 error.
     *
     * Once a valid route is identified, the associated controller is invoked to process
     * the request.
     *
     * @param  Request  $request  The incoming HTTP request containing the URI and other request data.
     * @return mixed The response generated by the invoked controller, which could be a view, JSON, or another HTTP response.
     *
     * @throws HttpException If the route does not exist or the landing page is not configured (404 error).
     * @throws BindingResolutionException If a controller for the resolved route cannot be instantiated.
     */
    public function __invoke(Request $request)
    {
        if ($this->websiteSetting->isOnline() === false) {
            abort(503);
        }

        $uri = $request->getRequestUri();

        if (strlen(trim($uri, '/')) === 0) {
            // Landing page
            $page = $this->websiteSetting->getLandingPage();

            if (empty($page) || empty($page->route)) {
                abort(404);
            }

            return $this->invokeController($request, $page->route);
        }

        $route = Route::query()
            ->where('route', '=', '/' . trim($uri, '/'))
            ->first();

        if (empty($route)) {
            abort(404);
        }

        return $this->invokeController($request, $route);
    }

    /**
     * Invokes the controller associated with the given route to process the incoming request.
     *
     * This method resolves the controller class corresponding to the provided route, instantiates it,
     * and delegates the handling of the request to the resolved controller. If the route or its
     * associated controller cannot be found, a 404 error is triggered. The method also updates
     * the visit log with the relevant response code and associates the visit with the route.
     *
     * @param  Request  $request  The incoming HTTP request containing the request data.
     * @param  Route|null  $route  The route associated with the current request, or null if unavailable.
     * @return View|Response The response generated by the invoked controller, which can be an HTML view or an HTTP response.
     *
     * @throws HttpException If the route or the associated controller does not exist (404 error).
     * @throws BindingResolutionException If the controller for the resolved route cannot be instantiated.
     */
    protected function invokeController(
        Request $request,
        ?Route $route = null
    ): View | Response {
        /** @var null|class-string<CmsRoutingContract> $class */
        $class = GetControllerFromRouteable::run($route);

        if (empty($class)) {
            abort(404);
        }

        $controller = app()->make($class);

        $response = $controller($request, $route->routeable);

        /** @var Visit $visit */
        $visit = $request->get('visit');

        if ($response instanceof View) {
            $visit->update([
                'response_code' => 200,
            ]);
        } elseif ($response instanceof Response) {
            $visit->update([
                'response_code' => $response->getStatusCode(),
            ]);
        }

        $visit->route()->associate($route);

        return $response;
    }
}
