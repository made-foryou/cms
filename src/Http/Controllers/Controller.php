<?php

declare(strict_types=1);

namespace Made\Cms\Http\Controllers;

use Illuminate\Contracts\Container\BindingResolutionException;
use Illuminate\Http\Request;
use Illuminate\Routing\Controller as BaseController;
use Made\Cms\Models\Settings\WebsiteSetting;
use Made\Cms\Shared\Actions\GetControllerFromRouteable;
use Made\Cms\Shared\Models\Route;
use Symfony\Component\HttpKernel\Exception\HttpException;

class Controller extends BaseController
{
    public function __construct(
        protected readonly WebsiteSetting $websiteSetting,
    ) {
        //
    }

    /**
     * Handles the invocation of the controller when the object is used as a callable.
     *
     * This method processes the incoming request by inspecting the URI and determining
     * the proper route to handle the request. If the URI is empty (representing the
     * root or landing page), it retrieves the landing page configuration. Otherwise,
     * it attempts to find a route that matches the URI. If no appropriate route is found,
     * the request is terminated with a 404 error.
     *
     * Once a valid route is identified, the associated controller is invoked to process
     * the request.
     *
     * @param  Request  $request  The incoming HTTP request containing the URI and other request data.
     * @return mixed The response generated by the invoked controller, which could be a view, JSON, or another HTTP response.
     *
     * @throws HttpException If the route does not exist or the landing page is not configured (404 error).
     * @throws BindingResolutionException If a controller for the resolved route cannot be instantiated.
     */
    public function __invoke(Request $request)
    {
        $uri = $request->getRequestUri();

        if (strlen(trim($uri, '/')) === 0) {
            // Landing page
            $page = $this->websiteSetting->getLandingPage();

            if (empty($page) || empty($page->route)) {
                abort(404);
            }

            return $this->invokeController($request, $page->route);
        }

        $route = Route::query()
            ->where('route', '=', '/' . trim($uri, '/'))
            ->first();

        if (empty($route)) {
            abort(404);
        }

        return $this->invokeController($request, $route);
    }

    /**
     * Invokes a controller for the given request and route.
     *
     * This method determines the controller class associated with the provided route, creates an instance of the controller,
     * and executes it using the given request and route. If the controller class cannot be resolved or is missing,
     * the method will terminate the request with a 404 error.
     *
     * @param  Request  $request  The incoming HTTP request to handle.
     * @param  mixed  $route  The route associated with the request, typically an instance or representation of a route to resolve.
     * @return mixed The executed controller's response, which can include JSON, views, or any other valid HTTP response.
     *
     * @throws BindingResolutionException If the controller cannot be resolved using the container.
     * @throws HttpException If the route does not resolve to a valid controller (404).
     */
    protected function invokeController($request, $route)
    {
        /** @var null|class-string<CmsRoutingContract> $class */
        $class = GetControllerFromRouteable::run($route);

        if (empty($class)) {
            abort(404);
        }

        $controller = app()->make($class);

        return $controller($request, $route->routeable);
    }
}
